import os
import logging
import threading
import re
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ---------- FLASK –°–ï–†–í–ï–† (Render –¥–µ—Ä–∂–∏—Ç –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç—ã–º) ----------
web_app = Flask(__name__)

@web_app.get("/")
def healthcheck():
    return "OK: russian-bot-3class is running"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    web_app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ----------
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# ---------- –ë–ê–ó–ê –ü–†–ê–í–ò–õ (–∫–æ—Ä–æ—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è) ----------
RUSSIAN_RULES = {
    "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ": {
        "title": "üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ",
        "rule": "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ ‚Äî –¥–≤–∞ –∏ –±–æ–ª–µ–µ —Å–ª–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ —Å–º—ã—Å–ª—É. "
                "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–∞–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—É—é –º—ã—Å–ª—å, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞–∫–æ–º (. ? !).",
        "example": "¬´—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É¬ª ‚Äî —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ; ¬´–ú–∞–º–∞ —á–∏—Ç–∞–µ—Ç –∫–Ω–∏–≥—É.¬ª ‚Äî –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
    },
    "–≤–∏–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ü–µ–ª–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è": {
        "title": "üéØ –í–∏–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ü–µ–ª–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è",
        "rule": "–ü–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ (.) ‚Äî —Å–æ–æ–±—â–∞—é—Ç; –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ (?) ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç; –ü–æ–±—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ (! –∏–ª–∏ .) ‚Äî –ø—Ä–∏–∑—ã–≤–∞—é—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—é.",
        "example": "¬´–°–µ–≥–æ–¥–Ω—è —Ç–µ–ø–ª–æ.¬ª ‚Äî –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ; ¬´–¢—ã —Å–¥–µ–ª–∞–ª —É—Ä–æ–∫–∏?¬ª ‚Äî –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ; ¬´–î–∞–≤–∞–π —á–∏—Ç–∞—Ç—å!¬ª ‚Äî –ø–æ–±—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ."
    },
    "–≥–ª–∞–≤–Ω—ã–µ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —á–ª–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": {
        "title": "üèó –ì–ª–∞–≤–Ω—ã–µ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —á–ª–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        "rule": "–ì–ª–∞–≤–Ω—ã–µ: –ø–æ–¥–ª–µ–∂–∞—â–µ–µ (–∫—Ç–æ? —á—Ç–æ?) –∏ —Å–∫–∞–∑—É–µ–º–æ–µ (—á—Ç–æ –¥–µ–ª–∞–µ—Ç?). –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ: –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ.",
        "example": "¬´–ö–æ—Ç (–ø–æ–¥–ª–µ–∂.) —Å–ø–∏—Ç (—Å–∫–∞–∑.) –Ω–∞ –∫–æ–≤—Ä–∏–∫–µ (–æ–±—Å—Ç.).¬ª"
    },
    "—á–∞—Å—Ç—å —Ä–µ—á–∏ –∏–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ": {
        "title": "üì¶ –ò–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ",
        "rule": "–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç, –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫—Ç–æ? —á—Ç–æ?, –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ø–æ —á–∏—Å–ª–∞–º –∏ –ø–∞–¥–µ–∂–∞–º.",
        "example": "–∫—Ç–æ? ‚Äî –º–∞–º–∞; —á—Ç–æ? ‚Äî –¥–æ–º."
    },
    "—á–∞—Å—Ç—å —Ä–µ—á–∏ –∏–º—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ": {
        "title": "üé® –ò–º—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ",
        "rule": "–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–µ–¥–º–µ—Ç–∞, –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫–æ–π? –∫–∞–∫–∞—è? –∫–∞–∫–æ–µ? –∫–∞–∫–∏–µ?, —Å–æ–≥–ª–∞—Å—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º.",
        "example": "–≤–µ—Å—ë–ª—ã–π –º–∞–ª—å—á–∏–∫, —Å–∏–Ω–µ–µ –Ω–µ–±–æ."
    },
    "—á–∞—Å—Ç—å —Ä–µ—á–∏ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ": {
        "title": "üß≠ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ",
        "rule": "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã, –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –Ω–µ –Ω–∞–∑—ã–≤–∞—è –∏—Ö.",
        "example": "–æ–Ω, –æ–Ω–∞, —ç—Ç–æ, —Ç–∞–∫–æ–π, —Å—Ç–æ–ª—å–∫–æ."
    },
    "—á–∞—Å—Ç—å —Ä–µ—á–∏ –≥–ª–∞–≥–æ–ª": {
        "title": "‚ö° –ì–ª–∞–≥–æ–ª",
        "rule": "–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ. –í–æ–ø—Ä–æ—Å—ã: —á—Ç–æ –¥–µ–ª–∞—Ç—å? —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å? –ò–∑–º–µ–Ω—è–µ—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∞–º, —á–∏—Å–ª–∞–º, —Ä–æ–¥–∞–º.",
        "example": "—á–∏—Ç–∞—Ç—å, –Ω–∞–ø–∏—Å–∞–ª, –¥—É–º–∞—é—Ç."
    },
    "–º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –≥–ª–∞–≥–æ–ª–∞": {
        "title": "üßæ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –≥–ª–∞–≥–æ–ª–∞",
        "rule": "–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É, –≤–∏–¥, –≤—Ä–µ–º—è, —á–∏—Å–ª–æ/—Ä–æ–¥, –ª–∏—Ü–æ.",
        "example": "—á–∏—Ç–∞–µ—Ç: –∏–Ω—Ñ. ¬´—á–∏—Ç–∞—Ç—å¬ª, –≤–∏–¥ ‚Äî –Ω–µ—Å–æ–≤., –Ω–∞—Å—Ç. –≤—Ä., –µ–¥.—á., 3-–µ –ª–∏—Ü–æ."
    }
}

def clean_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: —É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É"""
    return re.sub(r"[^\w\s]", "", text).lower().strip()

# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–´ ----------
def main_keyboard():
    kb = [
        ["üìö –°–∏–Ω—Ç–∞–∫—Å–∏—Å", "üì¶ –ß–∞—Å—Ç–∏ —Ä–µ—á–∏"],
        ["‚úçÔ∏è –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è", "‚ö° –ì–ª–∞–≥–æ–ª—ã"],
        ["üéØ –í—Å–µ —Ç–µ–º—ã", "‚ùì –ü–æ–º–æ—â—å"]
    ]
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è 3 –∫–ª–∞—Å—Å–∞.\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /rules ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ–º, /help ‚Äî –ø–æ–º–æ—â—å."
    )
    await update.message.reply_text(text, reply_markup=main_keyboard())

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üÜò –ü–æ–º–æ—â—å\n"
        "‚Äî –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞.\n"
        "‚Äî –ò–ª–∏ –ø–∏—à–∏ —Ç–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–≥–ª–∞–≥–æ–ª¬ª, ¬´—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ¬ª).\n"
        "‚Äî –ö–æ–º–∞–Ω–¥–∞ /rules –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ —Ç–µ–º—ã –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º."
    )
    await update.message.reply_text(text, reply_markup=main_keyboard())

async def cmd_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = ["üìö –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n"]
    for key, val in RUSSIAN_RULES.items():
        txt.append(f"‚Ä¢ {val['title']}")
    await update.message.reply_text("\n".join(txt), reply_markup=main_keyboard())

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = clean_text(update.message.text)

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
    if "—Å–∏–Ω—Ç–∞–∫—Å–∏—Å" in msg:
        await update.message.reply_text(
            "üìö –¢–µ–º—ã –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É:\n‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ\n‚Ä¢ –í–∏–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ü–µ–ª–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è\n‚Ä¢ –ì–ª–∞–≤–Ω—ã–µ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —á–ª–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
            reply_markup=main_keyboard()
        )
        return
    elif "–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è" in msg:
        await update.message.reply_text(
            "‚úçÔ∏è –¢–µ–º—ã –ø–æ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏:\n‚Ä¢ –ñ–∏-—à–∏\n‚Ä¢ –ß–∞-—â–∞\n‚Ä¢ –ß—É-—â—É",
            reply_markup=main_keyboard()
        )
        return
    elif "—á–∞—Å—Ç–∏ —Ä–µ—á–∏" in msg:
        await update.message.reply_text(
            "üì¶ –ß–∞—Å—Ç–∏ —Ä–µ—á–∏:\n‚Ä¢ –ò–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ\n‚Ä¢ –ò–º—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ\n‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ\n‚Ä¢ –ì–ª–∞–≥–æ–ª",
            reply_markup=main_keyboard()
        )
        return
    elif "–≥–ª–∞–≥–æ–ª" in msg or "–≥–ª–∞–≥–æ–ª—ã" in msg:
        await update.message.reply_text(
            "‚ö° –¢–µ–º—ã –ø–æ –≥–ª–∞–≥–æ–ª—É:\n‚Ä¢ –í—Ä–µ–º–µ–Ω–∞ –≥–ª–∞–≥–æ–ª–æ–≤\n‚Ä¢ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –≥–ª–∞–≥–æ–ª–∞",
            reply_markup=main_keyboard()
        )
        return
    elif "–≤—Å–µ —Ç–µ–º—ã" in msg:
        await cmd_rules(update, context)
        return
    elif "–ø–æ–º–æ—â—å" in msg:
        await cmd_help(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –±–∞–∑–µ –ø—Ä–∞–≤–∏–ª
    for key, data in RUSSIAN_RULES.items():
        if msg in key or key in msg:
            resp = f"üìñ <b>{data['title']}</b>\n\n<b>–ü—Ä–∞–≤–∏–ª–æ:</b> {data['rule']}\n\n<b>–ü—Ä–∏–º–µ—Ä:</b> {data['example']}"
            await update.message.reply_text(resp, parse_mode="HTML", reply_markup=main_keyboard())
            return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    await update.message.reply_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /rules.", reply_markup=main_keyboard())

# ---------- –ó–ê–ü–£–°–ö ----------
def build_app():
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
        raise SystemExit(1)
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("rules", cmd_rules))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    return app

def main():
    threading.Thread(target=run_flask, daemon=True).start()
    application = build_app()
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
