import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

rules = {
    "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ": "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ ‚Äî –¥–≤–∞ –∏ –±–æ–ª–µ–µ —Å–ª–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ —Å–º—ã—Å–ª—É. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî –≤—ã—Ä–∞–∂–∞–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—É—é –º—ã—Å–ª—å...",
    "–í–∏–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ü–µ–ª–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è": "–ü–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ (.) –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ (?) –ü–æ–±—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ (. –∏–ª–∏ !)",
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è 3 –∫–ª–∞—Å—Å–∞ üìö\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /rules.")

async def list_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topics = "\n".join([f"‚Ä¢ {topic}" for topic in rules.keys()])
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n" + topics)

async def get_rule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    for key, value in rules.items():
        if text in key.lower():
            await update.message.reply_text(f"**{key}**\n\n{value}", parse_mode='Markdown')
            return
    await update.message.reply_text("–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π /rules, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º.")

def main():
    try:
        application = Application.builder().token(TOKEN).build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("rules", list_rules))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, get_rule))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    main()
