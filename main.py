import os
import logging
from flask import Flask
from threading import Thread
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from rules import RULES

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Flask –¥–ª—è Render ---
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def main_keyboard():
    keyboard = [
        ["üìö –°–∏–Ω—Ç–∞–∫—Å–∏—Å", "üì¶ –ß–∞—Å—Ç–∏ —Ä–µ—á–∏"],
        ["‚úçÔ∏è –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è", "‚ö° –ì–ª–∞–≥–æ–ª—ã"],
        ["üìë –í—Å–µ —Ç–µ–º—ã", "‚ùì –ü–æ–º–æ—â—å"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è 3 –∫–ª–∞—Å—Å–∞.\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/rules ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º\n"
        "/help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞.",
        reply_markup=main_keyboard()
    )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã.\n"
        "/rules ‚Äî –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º."
    )

async def cmd_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìë <b>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:</b>\n\n"
    for key, data in RULES.items():
        text += f"- {data['title']}\n"
    await update.message.reply_text(text, parse_mode="HTML")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.lower().strip()

    for key, data in RULES.items():
        if query in key or query in data["title"].lower():
            text = f"<b>{data['title']}</b>\n\n"
            text += f"<b>–ü—Ä–∞–≤–∏–ª–æ:</b> {data['rule']}\n\n"
            text += "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n" + "\n".join(data["examples"])
            await update.message.reply_text(text, parse_mode="HTML")
            return

    await update.message.reply_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /rules")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

def main():
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    tg_app = Application.builder().token(BOT_TOKEN).build()

    tg_app.add_handler(CommandHandler("start", cmd_start))
    tg_app.add_handler(CommandHandler("help", cmd_help))
    tg_app.add_handler(CommandHandler("rules", cmd_rules))
    tg_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_flask, daemon=True).start()

    tg_app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
