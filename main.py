import os
import logging
import threading
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

from rules import RULES

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

web_app = Flask(__name__)

@web_app.route("/")
def home():
    return "‚úÖ –ë–æ—Ç –†—É—Å.—è–∑—ã–∫ 3 –∫–ª–∞—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!"

BOT_TOKEN = os.environ.get("BOT_TOKEN")

def main_keyboard():
    keyboard = [
        ["üìö –°–∏–Ω—Ç–∞–∫—Å–∏—Å", "üì¶ –ß–∞—Å—Ç–∏ —Ä–µ—á–∏"],
        ["‚úç –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è", "‚ùì –ü–æ–º–æ—â—å"],
        ["üìã –í—Å–µ —Ç–µ–º—ã"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è 3 –∫–ª–∞—Å—Å–∞.\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /rules ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º, /help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞.",
        reply_markup=main_keyboard()
    )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üÜò –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã.\n"
        "/rules ‚Äî –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º."
    )

async def cmd_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìã <b>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:</b>\n\n"
    for key, data in RULES.items():
        text += f"‚Ä¢ {data['title']}\n"
    await update.message.reply_text(text, parse_mode="HTML")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.lower().strip()

    if query in ["üìö —Å–∏–Ω—Ç–∞–∫—Å–∏—Å", "—Å–∏–Ω—Ç–∞–∫—Å–∏—Å"]:
        await update.message.reply_text("üìö –¢–µ–º—ã –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É:\n‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ\n‚Ä¢ –í–∏–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        return
    elif query in ["üì¶ —á–∞—Å—Ç–∏ —Ä–µ—á–∏", "—á–∞—Å—Ç–∏ —Ä–µ—á–∏"]:
        await update.message.reply_text("üì¶ –¢–µ–º—ã –ø–æ —á–∞—Å—Ç—è–º —Ä–µ—á–∏:\n‚Ä¢ –ò–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ\n‚Ä¢ –ì–ª–∞–≥–æ–ª")
        return
    elif query in ["‚úç –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è", "–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è"]:
        await update.message.reply_text("‚úç –¢–µ–º—ã –ø–æ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏:\n‚Ä¢ –ñ–∏-—à–∏")
        return

    for key, data in RULES.items():
        if query in key or key in query:
            text = f"üìñ <b>{data['title']}</b>\n\n"
            text += f"<b>–ü—Ä–∞–≤–∏–ª–æ:</b> {data['rule']}\n\n"
            text += "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n" + "\n".join(f"‚Ä¢ {ex}" for ex in data["examples"])
            await update.message.reply_text(text, parse_mode="HTML")
            return

    await update.message.reply_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /rules")

def setup_app():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("rules", cmd_rules))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    return app

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    web_app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)

def main():
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    threading.Thread(target=run_flask, daemon=True).start()
    app = setup_app()
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
