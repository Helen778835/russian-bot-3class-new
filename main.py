import os
import logging
import threading
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# ===== –õ–û–ì–ò =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== FLASK =====
web_app = Flask(__name__)

@web_app.route("/")
def home():
    return "‚úÖ –ë–æ—Ç –†—É—Å.—è–∑—ã–∫ 3 –∫–ª–∞—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# ===== TOKEN =====
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# ===== –ü–†–ê–í–ò–õ–ê =====
RULES = {
    "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ": {
        "title": "üìñ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ",
        "rule": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–∞–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—É—é –º—ã—Å–ª—å, —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ ‚Äî –Ω–µ—Ç.",
        "examples": ["–ú–∞–º–∞ —á–∏—Ç–∞–µ—Ç –∫–Ω–∏–≥—É. ‚Äî –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É ‚Äî —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ"]
    },
    "–≤–∏–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π": {
        "title": "üìñ –í–∏–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
        "rule": "–ü–æ —Ü–µ–ª–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è –±—ã–≤–∞—é—Ç –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ, –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ.",
        "examples": ["–°–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞.", "–¢—ã —Å–¥–µ–ª–∞–ª —É—Ä–æ–∫–∏?", "–£—Ä–∞! –ö–∞–Ω–∏–∫—É–ª—ã!"]
    },
    "–≥–ª–∞–≤–Ω—ã–µ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —á–ª–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": {
        "title": "üìñ –ì–ª–∞–≤–Ω—ã–µ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —á–ª–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        "rule": "–ì–ª–∞–≤–Ω—ã–µ ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ –∏ —Å–∫–∞–∑—É–µ–º–æ–µ. –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ ‚Äî –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ.",
        "examples": ["–ö–æ—Ç —Å–ø–∏—Ç. ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ –∏ —Å–∫–∞–∑—É–µ–º–æ–µ", "–ö–æ—Ç —Å–ø–∏—Ç –Ω–∞ –¥–∏–≤–∞–Ω–µ. ‚Äî –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ"]
    },
    "–∏–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ": {
        "title": "üì¶ –ò–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ",
        "rule": "–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫—Ç–æ? —á—Ç–æ?",
        "examples": ["–∫—Ç–æ? ‚Äî –º–∞–º–∞, —É—á–µ–Ω–∏–∫", "—á—Ç–æ? ‚Äî –∫–Ω–∏–≥–∞, —à–∫–æ–ª–∞"]
    },
    "–∏–º—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ": {
        "title": "üé® –ò–º—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ",
        "rule": "–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫–æ–π? –∫–∞–∫–∞—è? –∫–∞–∫–æ–µ? –∫–∞–∫–∏–µ?",
        "examples": ["–∫–∞–∫–æ–π? ‚Äî –∫—Ä–∞—Å–Ω—ã–π", "–∫–∞–∫–∞—è? ‚Äî –¥–æ–±—Ä–∞—è", "–∫–∞–∫–æ–µ? ‚Äî —Å–∏–Ω–µ–µ"]
    },
    "–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ": {
        "title": "üôã –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ",
        "rule": "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã, –Ω–æ –Ω–µ –Ω–∞–∑—ã–≤–∞–µ—Ç –∏—Ö.",
        "examples": ["—è, —Ç—ã, –æ–Ω, –æ–Ω–∞, –º—ã, –≤—ã, –æ–Ω–∏"]
    },
    "–≥–ª–∞–≥–æ–ª": {
        "title": "‚ö° –ì–ª–∞–≥–æ–ª",
        "rule": "–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ. –í–æ–ø—Ä–æ—Å—ã: —á—Ç–æ –¥–µ–ª–∞—Ç—å? —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
        "examples": ["—á–∏—Ç–∞—Ç—å, –ø–∏—Å–∞—Ç—å, –∏–≥—Ä–∞—Ç—å"]
    },
    "–≤—Ä–µ–º–µ–Ω–∞ –≥–ª–∞–≥–æ–ª–æ–≤": {
        "title": "‚è≥ –í—Ä–µ–º–µ–Ω–∞ –≥–ª–∞–≥–æ–ª–æ–≤",
        "rule": "–ü—Ä–æ—à–µ–¥—à–µ–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ, –±—É–¥—É—â–µ–µ.",
        "examples": ["—á–∏—Ç–∞–ª, —á–∏—Ç–∞—é, –±—É–¥—É —á–∏—Ç–∞—Ç—å"]
    },
    "–º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –≥–ª–∞–≥–æ–ª–∞": {
        "title": "üõ† –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –≥–ª–∞–≥–æ–ª–∞",
        "rule": "–£–∫–∞–∂–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É, –≤—Ä–µ–º—è, —á–∏—Å–ª–æ, –ª–∏—Ü–æ, —Ä–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å).",
        "examples": ["–ß–∏—Ç–∞—é: –≥–ª–∞–≥–æ–ª, –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤ ‚Äî —á–∏—Ç–∞—Ç—å, –Ω–∞—Å—Ç. –≤—Ä–µ–º—è, 1 –ª–∏—Ü–æ, –µ–¥. —á–∏—Å–ª–æ"]
    },
    "–∂–∏-—à–∏": {
        "title": "‚úç –ñ–∏-—à–∏",
        "rule": "–ü–æ—Å–ª–µ –ñ –∏ –® –≤—Å–µ–≥–¥–∞ –ø–∏—à–µ—Ç—Å—è –ò.",
        "examples": ["–∂–∏—Ä–∞—Ñ, —à–∏—à–∫–∞ ‚Äî –≤–µ—Ä–Ω–æ", "–∂—ã—Ä–∞—Ñ ‚Äî –æ—à–∏–±–∫–∞"]
    },
    "—á–∞-—â–∞": {
        "title": "‚úç –ß–∞-—â–∞",
        "rule": "–ü–æ—Å–ª–µ –ß –∏ –© –≤—Å–µ–≥–¥–∞ –ø–∏—à–µ—Ç—Å—è –ê.",
        "examples": ["—á–∞—à–∫–∞, —â–∞–≤–µ–ª—å ‚Äî –≤–µ—Ä–Ω–æ", "—á—è—à–∫–∞ ‚Äî –æ—à–∏–±–∫–∞"]
    },
    "—á—É-—â—É": {
        "title": "‚úç –ß—É-—â—É",
        "rule": "–ü–æ—Å–ª–µ –ß –∏ –© –≤—Å–µ–≥–¥–∞ –ø–∏—à–µ—Ç—Å—è –£.",
        "examples": ["—á—É–¥–æ, —â—É–∫–∞ ‚Äî –≤–µ—Ä–Ω–æ", "—á—é–¥–æ ‚Äî –æ—à–∏–±–∫–∞"]
    }
}

# ===== –ö–ù–û–ü–ö–ò =====
def main_keyboard():
    keyboard = [
        ["üìö –°–∏–Ω—Ç–∞–∫—Å–∏—Å", "üì¶ –ß–∞—Å—Ç–∏ —Ä–µ—á–∏"],
        ["‚úç –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è", "‚ö° –ì–ª–∞–≥–æ–ª—ã"],
        ["üìã –í—Å–µ —Ç–µ–º—ã", "‚ùì –ü–æ–º–æ—â—å"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ===== –ö–û–ú–ê–ù–î–´ =====
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è 3 –∫–ª–∞—Å—Å–∞.\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /rules ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º, /help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞.",
        reply_markup=main_keyboard()
    )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üÜò –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã.\n"
        "/rules ‚Äî –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º."
    )

async def cmd_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìã <b>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:</b>\n\n"
    for key, data in RULES.items():
        text += f"‚Ä¢ {data['title']}\n"
    await update.message.reply_text(text, parse_mode="HTML")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô =====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.lower().strip()

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    if query in ["üìö —Å–∏–Ω—Ç–∞–∫—Å–∏—Å", "—Å–∏–Ω—Ç–∞–∫—Å–∏—Å"]:
        await update.message.reply_text(
            "üìö –¢–µ–º—ã –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É:\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ\n"
            "‚Ä¢ –í–∏–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
            "‚Ä¢ –ì–ª–∞–≤–Ω—ã–µ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —á–ª–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
        )
        return
    elif query in ["üì¶ —á–∞—Å—Ç–∏ —Ä–µ—á–∏", "—á–∞—Å—Ç–∏ —Ä–µ—á–∏"]:
        await update.message.reply_text(
            "üì¶ –¢–µ–º—ã –ø–æ —á–∞—Å—Ç—è–º —Ä–µ—á–∏:\n"
            "‚Ä¢ –ò–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ\n"
            "‚Ä¢ –ò–º—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ\n"
            "‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ\n"
            "‚Ä¢ –ì–ª–∞–≥–æ–ª"
        )
        return
    elif query in ["‚úç –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è", "–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è"]:
        await update.message.reply_text(
            "‚úç –¢–µ–º—ã –ø–æ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏:\n"
            "‚Ä¢ –ñ–∏-—à–∏\n‚Ä¢ –ß–∞-—â–∞\n‚Ä¢ –ß—É-—â—É"
        )
        return
    elif query in ["‚ö° –≥–ª–∞–≥–æ–ª—ã", "–≥–ª–∞–≥–æ–ª—ã"]:
        await update.message.reply_text(
            "‚ö° –¢–µ–º—ã –ø–æ –≥–ª–∞–≥–æ–ª—É:\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–∞ –≥–ª–∞–≥–æ–ª–æ–≤\n"
            "‚Ä¢ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –≥–ª–∞–≥–æ–ª–∞"
        )
        return

    # –ü–æ–∏—Å–∫ —Ç–µ–º—ã
    for key, data in RULES.items():
        if query in key or key in query:
            text = f"üìñ <b>{data['title']}</b>\n\n"
            text += f"<b>–ü—Ä–∞–≤–∏–ª–æ:</b> {data['rule']}\n\n"
            text += "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n" + "\n".join(f"‚Ä¢ {ex}" for ex in data["examples"])
            await update.message.reply_text(text, parse_mode="HTML")
            return

    await update.message.reply_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /rules")

# ===== –ó–ê–ü–£–°–ö =====
def setup_app():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("rules", cmd_rules))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    return app

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    web_app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)

def main():
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    threading.Thread(target=run_flask, daemon=True).start()
    app = setup_app()
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()

