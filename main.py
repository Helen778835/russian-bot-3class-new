import os
import logging
import threading
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ===== –õ–û–ì–ò =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== FLASK –î–õ–Ø RENDER =====
web_app = Flask(__name__)

@web_app.route("/")
def home():
    return "‚úÖ –ë–æ—Ç –†—É—Å.—è–∑—ã–∫ 3 –∫–ª–∞—Å—Å –∑–∞–ø—É—â–µ–Ω!"

# ===== –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –° –¢–û–ö–ï–ù–û–ú =====
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# ===== –ü–†–ê–í–ò–õ–ê =====
RULES = {
    "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ": {
        "title": "üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ",
        "rule": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–∞–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—É—é –º—ã—Å–ª—å. –°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –¥–≤–∞ –∏–ª–∏ –±–æ–ª–µ–µ —Å–ª–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ —Å–º—ã—Å–ª—É.",
        "examples": ["–ú–∞–º–∞ —á–∏—Ç–∞–µ—Ç –∫–Ω–∏–≥—É. (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)", "—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É (—Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ)"]
    },
    "–≤–∏–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π": {
        "title": "üìö –í–∏–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ü–µ–ª–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è",
        "rule": "‚Ä¢ –ü–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ ‚Äî —Å–æ–æ–±—â–∞—é—Ç.\n‚Ä¢ –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ ‚Äî –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å.\n‚Ä¢ –ü–æ–±—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ ‚Äî –≤—ã—Ä–∞–∂–∞—é—Ç –ø—Ä–æ—Å—å–±—É –∏–ª–∏ –ø—Ä–∏–∫–∞–∑.",
        "examples": ["–Ø —á–∏—Ç–∞—é –∫–Ω–∏–≥—É.", "–¢—ã —á–∏—Ç–∞–µ—à—å?", "–ü—Ä–æ—á–∏—Ç–∞–π!"]
    },
    "–≥–ª–∞–≤–Ω—ã–µ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —á–ª–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": {
        "title": "üìñ –ì–ª–∞–≤–Ω—ã–µ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —á–ª–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        "rule": "–ì–ª–∞–≤–Ω—ã–µ —á–ª–µ–Ω—ã: –ø–æ–¥–ª–µ–∂–∞—â–µ–µ –∏ —Å–∫–∞–∑—É–µ–º–æ–µ.\n–í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ: –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ.",
        "examples": ["–ö–æ—Ç (–ø–æ–¥–ª–µ–∂–∞—â–µ–µ) —Å–ø–∏—Ç (—Å–∫–∞–∑—É–µ–º–æ–µ) –Ω–∞ –¥–∏–≤–∞–Ω–µ (–æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ)."]
    },
    "–∏–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ": {
        "title": "üì¶ –ò–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ",
        "rule": "–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç, –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫—Ç–æ? —á—Ç–æ?",
        "examples": ["–∫—Ç–æ? ‚Äî –º–∞–º–∞, —É—á–µ–Ω–∏–∫", "—á—Ç–æ? ‚Äî –∫–Ω–∏–≥–∞, —Å–æ–ª–Ω—Ü–µ"]
    },
    "–∏–º—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ": {
        "title": "üé® –ò–º—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ",
        "rule": "–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–µ–¥–º–µ—Ç–∞, –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫–æ–π? –∫–∞–∫–∞—è? –∫–∞–∫–æ–µ?",
        "examples": ["–∫–∞–∫–æ–π? –∫—Ä–∞—Å–∏–≤—ã–π", "–∫–∞–∫–∞—è? –¥–æ–±—Ä–∞—è", "–∫–∞–∫–æ–µ? –±–æ–ª—å—à–æ–µ"]
    },
    "–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ": {
        "title": "üë§ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ",
        "rule": "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç, –Ω–æ –Ω–µ –Ω–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ.",
        "examples": ["—è, —Ç—ã, –æ–Ω, –æ–Ω–∞, –º—ã, –≤—ã, –æ–Ω–∏"]
    },
    "–≥–ª–∞–≥–æ–ª": {
        "title": "‚ö° –ì–ª–∞–≥–æ–ª",
        "rule": "–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ. –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —á—Ç–æ –¥–µ–ª–∞—Ç—å? —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
        "examples": ["—á–∏—Ç–∞—Ç—å, –ø–∏—Å–∞—Ç—å, –∏–≥—Ä–∞—Ç—å", "–ø—Ä–æ—á–∏—Ç–∞—Ç—å, –Ω–∞–ø–∏—Å–∞—Ç—å, –ø–æ–∏–≥—Ä–∞—Ç—å"]
    },
    "–º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –≥–ª–∞–≥–æ–ª–∞": {
        "title": "üîç –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –≥–ª–∞–≥–æ–ª–∞",
        "rule": "1. –ù–∞—á–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ (–∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤).\n2. –í—Ä–µ–º—è, –ª–∏—Ü–æ, —á–∏—Å–ª–æ.\n3. –í–∏–¥ (—Å–æ–≤./–Ω–µ—Å–æ–≤.).\n4. –í–æ–∑–≤—Ä–∞—Ç–Ω–æ—Å—Ç—å.",
        "examples": ["–ß–∏—Ç–∞—Ç—å ‚Äî –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤, –Ω–µ—Å–æ–≤. –≤–∏–¥, 1 —Å–ø—Ä—è–∂–µ–Ω–∏–µ."]
    }
}

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def main_keyboard():
    kb = [
        ["üìö –°–∏–Ω—Ç–∞–∫—Å–∏—Å", "üì¶ –ß–∞—Å—Ç–∏ —Ä–µ—á–∏"],
        ["‚úçÔ∏è –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è", "‚ö° –ì–ª–∞–≥–æ–ª—ã"],
        ["üìë –í—Å–µ —Ç–µ–º—ã", "‚ùì –ü–æ–º–æ—â—å"]
    ]
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

# ===== –ö–û–ú–ê–ù–î–´ =====
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è 3 –∫–ª–∞—Å—Å–∞.\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /rules ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º, /help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞."
    )
    await update.message.reply_text(text, reply_markup=main_keyboard())

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üÜò –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ\n"
        "‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–≥–ª–∞–≥–æ–ª')\n"
        "‚Ä¢ /rules ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º"
    )
    await update.message.reply_text(text, reply_markup=main_keyboard())

async def cmd_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìë <b>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:</b>\n\n"
    for key, data in RULES.items():
        text += f"‚Ä¢ {data['title']}\n"
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=main_keyboard())

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô =====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.lower().strip()
    for key, data in RULES.items():
        if query in key or query in data["title"].lower():
            response = f"<b>{data['title']}</b>\n\n"
            response += f"<b>–ü—Ä–∞–≤–∏–ª–æ:</b> {data['rule']}\n\n"
            response += "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            for ex in data["examples"]:
                response += f"‚Ä¢ {ex}\n"
            await update.message.reply_text(response, parse_mode="HTML", reply_markup=main_keyboard())
            return
    await update.message.reply_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /rules", reply_markup=main_keyboard())

# ===== –ó–ê–ü–£–°–ö =====
def setup_app():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("rules", cmd_rules))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    return app

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    web_app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)

def main():
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    threading.Thread(target=run_flask, daemon=True).start()
    app = setup_app()
    app.run_polling()

if __name__ == "__main__":
    main()

