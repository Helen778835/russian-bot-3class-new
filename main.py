import os
import logging
import threading
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== FLASK –°–ï–†–í–ï–† –î–õ–Ø RENDER =====
web_app = Flask(__name__)

@web_app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É 3 –∫–ª–∞—Å—Å –∞–∫—Ç–∏–≤–µ–Ω!"

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê =====
BOT_TOKEN = os.environ.get('BOT_TOKEN')

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• –ü–†–ê–í–ò–õ =====
RUSSIAN_RULES = {
    "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ": {
        "title": "üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ",
        "rule": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–∞–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—É—é –º—ã—Å–ª—å, —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤—è–∑—å —Å–ª–æ–≤.",
        "examples": [
            "–ú–∞–º–∞ —á–∏—Ç–∞–µ—Ç –∫–Ω–∏–≥—É (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ).",
            "–ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É (—Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ)."
        ]
    },
    "–≤–∏–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ü–µ–ª–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è": {
        "title": "üìñ –í–∏–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ü–µ–ª–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è",
        "rule": "‚Ä¢ –ü–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ ‚Äî —Å–æ–æ–±—â–∞—é—Ç.\n‚Ä¢ –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç.\n‚Ä¢ –ü–æ–±—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ ‚Äî –ø—Ä–æ—Å—è—Ç –∏–ª–∏ –ø—Ä–∏–∫–∞–∑—ã–≤–∞—é—Ç.",
        "examples": [
            "–°–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞. (–ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ)",
            "–¢—ã —Å–¥–µ–ª–∞–ª —É—Ä–æ–∫–∏? (–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ)",
            "–ò–¥–∏ —Å—é–¥–∞! (–ø–æ–±—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ)"
        ]
    },
    "–≥–ª–∞–≤–Ω—ã–µ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —á–ª–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": {
        "title": "üîë –ì–ª–∞–≤–Ω—ã–µ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —á–ª–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        "rule": "–ì–ª–∞–≤–Ω—ã–µ —á–ª–µ–Ω—ã ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ –∏ —Å–∫–∞–∑—É–µ–º–æ–µ. –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ ‚Äî –¥–æ–ø–æ–ª–Ω—è—é—Ç —Å–º—ã—Å–ª.",
        "examples": [
            "–ú–∞–ª—å—á–∏–∫ (–ø–æ–¥–ª–µ–∂–∞—â–µ–µ) —á–∏—Ç–∞–µ—Ç (—Å–∫–∞–∑—É–µ–º–æ–µ) –∫–Ω–∏–≥—É (–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)."
        ]
    },
    "–∏–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ": {
        "title": "üì¶ –ò–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ",
        "rule": "–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç. –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫—Ç–æ? —á—Ç–æ?",
        "examples": [
            "–ö—Ç–æ? ‚Äî –º–∞–º–∞, —É—á–µ–Ω–∏–∫.",
            "–ß—Ç–æ? ‚Äî –∫–Ω–∏–≥–∞, —à–∫–æ–ª–∞."
        ]
    },
    "–∏–º—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ": {
        "title": "üé® –ò–º—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ",
        "rule": "–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–µ–¥–º–µ—Ç–∞. –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫–æ–π? –∫–∞–∫–∞—è? –∫–∞–∫–æ–µ?",
        "examples": [
            "–ö—Ä–∞—Å–∏–≤—ã–π –¥–æ–º, –¥–æ–±—Ä–∞—è –¥–µ–≤–æ—á–∫–∞."
        ]
    },
    "–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ": {
        "title": "üôã –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ",
        "rule": "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç, –Ω–æ –Ω–µ –Ω–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ.",
        "examples": [
            "—è, —Ç—ã, –æ–Ω, –æ–Ω–∞, –º—ã, –≤—ã, –æ–Ω–∏"
        ]
    },
    "–≥–ª–∞–≥–æ–ª": {
        "title": "‚ö° –ì–ª–∞–≥–æ–ª",
        "rule": "–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞. –í–æ–ø—Ä–æ—Å—ã: —á—Ç–æ –¥–µ–ª–∞—Ç—å? —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
        "examples": [
            "—á–∏—Ç–∞—Ç—å, –ø–∏—Å–∞—Ç—å, –∏–≥—Ä–∞—Ç—å",
            "–Ω–∞–ø–∏—Å–∞—Ç—å, –ø—Ä–æ—á–∏—Ç–∞—Ç—å"
        ]
    },
    "–º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –≥–ª–∞–≥–æ–ª–∞": {
        "title": "üõ† –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –≥–ª–∞–≥–æ–ª–∞",
        "rule": "1. –ù–∞—á–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ (–∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤)\n2. –í–∏–¥\n3. –í—Ä–µ–º—è\n4. –ß–∏—Å–ª–æ\n5. –õ–∏—Ü–æ –∏–ª–∏ —Ä–æ–¥",
        "examples": [
            "–ò–≥—Ä–∞–ª ‚Äî –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤: –∏–≥—Ä–∞—Ç—å, –≤–∏–¥: –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π, –≤—Ä–µ–º—è: –ø—Ä–æ—à–µ–¥—à–µ–µ, —á–∏—Å–ª–æ: –µ–¥., —Ä–æ–¥: –º—É–∂—Å–∫–æ–π."
        ]
    }
}

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def get_main_keyboard():
    keyboard = [
        ['üìö –°–∏–Ω—Ç–∞–∫—Å–∏—Å', 'üì¶ –ß–∞—Å—Ç–∏ —Ä–µ—á–∏'],
        ['‚úçÔ∏è –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è', '‚ö° –ì–ª–∞–≥–æ–ª—ã'],
        ['üìñ –í—Å–µ —Ç–µ–º—ã', '‚ùì –ü–æ–º–æ—â—å']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ===== –ö–û–ú–ê–ù–î–´ =====
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è 3 –∫–ª–∞—Å—Å–∞.\n\n–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã.\n–ö–æ–º–∞–Ω–¥—ã: /rules ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ–º, /help ‚Äî –ø–æ–º–æ—â—å."
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üÜò –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ¬ª –∏–ª–∏ ¬´–≥–ª–∞–≥–æ–ª¬ª."
    await update.message.reply_text(text)

async def rules_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìñ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n\n"
    for key, data in RUSSIAN_RULES.items():
        text += f"‚Ä¢ {data['title']}\n"
    await update.message.reply_text(text)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô =====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()

    for key, rule_data in RUSSIAN_RULES.items():
        if user_text in key:
            response = f"üìñ {rule_data['title']}\n\n<b>–ü—Ä–∞–≤–∏–ª–æ:</b>\n{rule_data['rule']}\n\n<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            for ex in rule_data['examples']:
                response += f"‚Ä¢ {ex}\n"
            await update.message.reply_text(response, parse_mode="HTML")
            return

    await update.message.reply_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /rules.")

# ===== –ó–ê–ü–£–°–ö =====
def setup_application():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("rules", rules_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    return app

def run_flask_server():
    port = int(os.environ.get("PORT", 5000))
    web_app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)

def main():
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    threading.Thread(target=run_flask_server, daemon=True).start()
    app = setup_application()
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()

